rename(Position = `POS`)
# Remove Rows where "Name" is duplicated
player.dupe.dat<-player.dat[duplicated(paste0(player.dat$Name, " ", player.dat$Position)),]
player.dat<-player.dat[!duplicated(paste0(player.dat$Name, " ", player.dat$Position)),]
# Histogramps for each variable
apply(player.dat[,-c(1:5)], 2, function(x) hist(x))
# Most distributions are fairly normal.  Z-Score should be fine for normalization
## Z-Score Normalization of Predictor Variables
str(player.dat)
# Check if any NAs
sum(is.na(player.dat))
colnames(player.dat)[which(colSums(is.na(player.dat)) > 0)]
player.dat$ACTIVE[is.na(player.dat$ACTIVE)]<-0
# identify NA rows
which(apply(player.dat, 1, function(x) any(is.na(x))))
# Remove NA rows
if(length(which(apply(player.dat, 1, function(x) any(is.na(x)))) > 0)){
player.dat<-player.dat[-which(apply(player.dat, 1, function(x) any(is.na(x)))),]
}
player.norm.dat<-player.dat
player.dat[,-c(1:5)]
player.norm.dat[,-c(1:5)]<-apply(player.dat[,-c(1:5)], 2, function(x) (x - mean(x))/sd(x))
apply(player.norm.dat[,-c(1:5)], 2, function(x) plot(density(x)))
# ## KNN
# KNN on full dataset
set.seed(8)
km.out <- kmeans(player.norm.dat[,-c(1:5)], centers = 10, nstart = 50)
km.out <- kmeans(player.norm.dat[,-c(1:5)], centers = 15, nstart = 50)
km.out <- kmeans(player.norm.dat[,-c(1:5)], centers = 15, nstart = 60)
# ## KNN
# KNN on full dataset
set.seed(8)
km.out <- kmeans(player.norm.dat[,-c(1:5)], centers = 10, nstart = 60)
# ## KNN
# KNN on full dataset
set.seed(81)
km.out <- kmeans(player.norm.dat[,-c(1:5)], centers = 10, nstart = 60)
km.out <- kmeans(player.norm.dat[,-c(1:5)], centers = 10, nstart = 40)
km.out
# Decide how many clusters to look at
n_clusters <- 20
# Initialize total within sum of squares error: wss
wss <- numeric(n_clusters)
set.seed(3)
# Look over 1 to n possible clusters
for (i in 1:n_clusters) {
# Fit the model: km.out
km.out <- kmeans(player.norm.dat[,-c(1:5)], centers = i, nstart = 100)
# Save the within cluster sum of squares
wss[i] <- km.out$tot.withinss
}
# Produce a scree plot
wss_df <- tibble(clusters = 1:n_clusters, wss = wss)
scree_plot <- ggplot(wss_df, aes(x = clusters, y = wss, group = 1)) +
geom_point(size = 4)+
geom_line() +
scale_x_continuous(breaks = c(2, 4, 6, 8, 10, 12, 14, 16, 18, 20)) +
xlab('Number of clusters')
scree_plot
scree_plot +
geom_hline(
yintercept = wss,
linetype = 'dashed',
col = c(rep('#000000',15),'#FF0000', rep('#000000', 4))
)
# Decide how many clusters to look at
n_clusters <- 30
# Initialize total within sum of squares error: wss
wss <- numeric(n_clusters)
set.seed(3)
# Look over 1 to n possible clusters
for (i in 1:n_clusters) {
# Fit the model: km.out
km.out <- kmeans(player.norm.dat[,-c(1:5)], centers = i, nstart = 100)
# Save the within cluster sum of squares
wss[i] <- km.out$tot.withinss
}
# Produce a scree plot
wss_df <- tibble(clusters = 1:n_clusters, wss = wss)
scree_plot <- ggplot(wss_df, aes(x = clusters, y = wss, group = 1)) +
geom_point(size = 4)+
geom_line() +
scale_x_continuous(breaks = c(2, 4, 6, 8, 10, 12, 14, 16, 18, 20)) +
xlab('Number of clusters')
scree_plot
scree_plot <- ggplot(wss_df, aes(x = clusters, y = wss, group = 1)) +
geom_point(size = 4)+
geom_line() +
scale_x_continuous(breaks = c(2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30)) +
xlab('Number of clusters')
scree_plot
scree_plot +
geom_hline(
yintercept = wss,
linetype = 'dashed',
col = c(rep('#000000',23),'#FF0000', rep('#000000', 6))
)
scree_plot +
geom_hline(
yintercept = wss,
linetype = 'dashed',
col = c(rep('#000000',19),'#FF0000', rep('#000000',10))
)
# Going with 13 clusters
set.seed(3)
km.out <- kmeans(player.norm.dat[,-c(1:6)], centers = 19, nstart = 100)
km.out <- kmeans(player.norm.dat[,-c(1:6)], centers = 19, nstart = 120)
km.out <- kmeans(player.norm.dat[,-c(1:6)], centers = 19, nstart = 140)
# Going with 13 clusters
set.seed(31)
km.out <- kmeans(player.norm.dat[,-c(1:6)], centers = 19, nstart = 140)
# Going with 13 clusters
set.seed(11)
km.out <- kmeans(player.norm.dat[,-c(1:6)], centers = 19, nstart = 140)
# Going with 13 clusters
set.seed(110)
km.out <- kmeans(player.norm.dat[,-c(1:6)], centers = 19, nstart = 140)
km.out
# Calculate euclidean distance between the first point and each other point in the dataset
# Combine column 2 and column 1 of ws.dat to get unique name
nms<-c()
for(i in 1:nrow(player.dat)){
nms[i]<-paste0(player.dat$Name[i], " - ", player.dat$Position[i])
}
nms
player.dat$Cluster<-km.out$cluster
player.norm.dat$Cluster<-km.out$cluster
(distances <- as.matrix(dist(player.norm.dat[,-c(1:5)], method = 'euclidean', diag = FALSE)))
# Make 0s into NAs
distances[distances == 0] <- NA
distances.df<-as.data.frame(distances)
colnames(distances.df)<-nms
rownames(distances.df)<-nms
distances.df
# Export distances
wb<-createWorkbook()
addWorksheet(wb, "Distances")
writeData(wb, "Distances", distances.df, rowNames = TRUE, colNames = TRUE)
saveWorkbook(wb, file = "./Output/Relief Pitcher Similarity Scores.xlsx", overwrite = TRUE)
View(player.dupe.dat)
library(dplyr)
library(readxl)
library(caret)
library(openxlsx)
#
# ######################################### Position Players #################################################
# ### Read in data ###
# full.dat<-read_xlsx("./Data/FanGraphs Career Stats by Pos.xlsx", sheet = "Non-Pitchers - No Dupes Stats")
# head(full.dat)
#
# ## Filter for necessary variables
# player.dat<-full.dat %>%
#   # extract last 4 characters from Index
#   select(Name, `Primary POS`,`HOF`, BALLOT, HOFBALLOT, ACTIVE,
#          H, HR, SB, wOBA, Fld, WAR, `WAR/162`, `wRC+`, BsR, `AVG+`, `OBP+`, `SLG+`) %>%
#   rename(Position = `Primary POS`)
#
# # Remove Rows where "Name" is duplicated
# player.dupe.dat<-player.dat[duplicated(paste0(player.dat$Name, " ", player.dat$Position)),]
# player.dat<-player.dat[!duplicated(paste0(player.dat$Name, " ", player.dat$Position)),]
#
# # Histogramps for each variable
# apply(player.dat[,-c(1:6)], 2, function(x) hist(x))
#
# # Most distributions are fairly normal.  Z-Score should be fine for normalization
#
# ## Z-Score Normalization of Predictor Variables
# str(player.dat)
# # Check if any NAs
# sum(is.na(player.dat))
# colnames(player.dat)[which(colSums(is.na(player.dat)) > 0)]
# # identify NA rows
# which(apply(player.dat, 1, function(x) any(is.na(x))))
# # Remove NA rows
# player.dat<-player.dat[-which(apply(player.dat, 1, function(x) any(is.na(x)))),]
#
# player.norm.dat<-player.dat
# player.norm.dat[,-c(1:6)]<-apply(player.dat[,-c(1:6)], 2, function(x) (x - mean(x))/sd(x))
#
# apply(player.norm.dat[,-c(1:6)], 2, function(x) plot(density(x)))
#
# # ## KNN
# # KNN on full dataset
# set.seed(8)
# km.out <- kmeans(player.norm.dat[,-c(1:6)], centers = 10, nstart = 50)
# km.out
#
# # Decide how many clusters to look at
# n_clusters <- 20
#
# # Initialize total within sum of squares error: wss
# wss <- numeric(n_clusters)
#
# set.seed(3)
#
# # Look over 1 to n possible clusters
# for (i in 1:n_clusters) {
#   # Fit the model: km.out
#   km.out <- kmeans(player.norm.dat[,-c(1:6)], centers = i, nstart = 100)
#   # Save the within cluster sum of squares
#   wss[i] <- km.out$tot.withinss
# }
#
# # Produce a scree plot
# wss_df <- tibble(clusters = 1:n_clusters, wss = wss)
#
# scree_plot <- ggplot(wss_df, aes(x = clusters, y = wss, group = 1)) +
#   geom_point(size = 4)+
#   geom_line() +
#   scale_x_continuous(breaks = c(2, 4, 6, 8, 10, 12, 14, 16, 18, 20)) +
#   xlab('Number of clusters')
# scree_plot
#
# scree_plot +
#   geom_hline(
#     yintercept = wss,
#     linetype = 'dashed',
#     col = c(rep('#000000',15),'#FF0000', rep('#000000', 4))
#   )
# # Going with 13 clusters
# set.seed(3)
# km.out <- kmeans(player.norm.dat[,-c(1:6)], centers = 13, nstart = 130)
# km.out
#
# # Calculate euclidean distance between the first point and each other point in the dataset
# # Combine column 2 and column 1 of ws.dat to get unique name
# nms<-c()
# for(i in 1:nrow(player.dat)){
#   nms[i]<-paste0(player.dat$Name[i], " - ", player.dat$Position[i])
# }
# nms
#
# player.dat$Cluster<-km.out$cluster
# player.norm.dat$Cluster<-km.out$cluster
#
# (distances <- as.matrix(dist(player.norm.dat[,-c(1:6)], method = 'euclidean', diag = FALSE)))
# # Make 0s into NAs
# distances[distances == 0] <- NA
# distances.df<-as.data.frame(distances)
# colnames(distances.df)<-nms
# rownames(distances.df)<-nms
# distances.df
#
# # Export distances
# wb<-createWorkbook()
# addWorksheet(wb, "Distances")
# writeData(wb, "Distances", distances.df, rowNames = TRUE, colNames = TRUE)
# #saveWorkbook(wb, file = "./Output/Position Player Similarity Scores.xlsx", overwrite = TRUE)
#
# # Filter by position
# for(pos in unique(player.dat$Position)){
#   pos.dat<-player.dat %>% filter(Position == pos)
#   pos.norm.dat<-player.norm.dat %>% filter(Position == pos)
#   (distances <- as.matrix(dist(pos.norm.dat[,-c(1:6)], method = 'euclidean', diag = FALSE)))
#
#   # Names
#   nms<-c()
#   for(i in 1:nrow(pos.norm.dat)){
#     nms[i]<-paste0(pos.dat$Name[i])
#   }
#   nms
#   # Make 0s into NAs
#   distances[distances == 0] <- NA
#   distances.df<-as.data.frame(distances)
#   colnames(distances.df)<-nms
#   rownames(distances.df)<-nms
#   distances.df
#
#   # Export distances
#   addWorksheet(wb, paste0(pos, " Distances"))
#   writeData(wb, paste0(pos, " Distances"), distances.df, rowNames = TRUE, colNames = TRUE)
# }
#
# # Export Workbook
# saveWorkbook(wb, file = "./Output/Position Player Similarity Scores.xlsx", overwrite = TRUE)
# ########################################## Relief Pitchers #################################################
# library(dplyr)
# library(readxl)
# library(caret)
# library(openxlsx)
# ### Read in data
# full.dat<-read_xlsx("./Data/FanGraphs Career Stats by Pos (P).xlsx", sheet = "P")
# head(full.dat)
#
# ## Filter for necessary variables
# player.dat<-full.dat %>%
#   filter(`POS` == "RP" | `SECONDARY` == "RP") %>%
#   # extract last 4 characters from Index
#   select(Name, `POS`,`HOF`, BALLOT, HOF, BALLOT, ACTIVE,
#          WP, ERA, SV, `WAR`, `ERA-`, `K/9+`, `BB/9+`, `AVG+`, `WHIP+`, POS) %>%
#   rename(Position = `POS`)
#
# # Remove Rows where "Name" is duplicated
# player.dupe.dat<-player.dat[duplicated(paste0(player.dat$Name, " ", player.dat$Position)),]
# player.dat<-player.dat[!duplicated(paste0(player.dat$Name, " ", player.dat$Position)),]
#
# # Histogramps for each variable
# apply(player.dat[,-c(1:5)], 2, function(x) hist(x))
#
# # Most distributions are fairly normal.  Z-Score should be fine for normalization
#
# ## Z-Score Normalization of Predictor Variables
# str(player.dat)
# # Check if any NAs
# sum(is.na(player.dat))
# colnames(player.dat)[which(colSums(is.na(player.dat)) > 0)]
# player.dat$ACTIVE[is.na(player.dat$ACTIVE)]<-0
# # identify NA rows
# which(apply(player.dat, 1, function(x) any(is.na(x))))
# # Remove NA rows
# if(length(which(apply(player.dat, 1, function(x) any(is.na(x)))) > 0)){
#   player.dat<-player.dat[-which(apply(player.dat, 1, function(x) any(is.na(x)))),]
# }
#
# player.norm.dat<-player.dat
# player.norm.dat[,-c(1:5)]<-apply(player.dat[,-c(1:5)], 2, function(x) (x - mean(x))/sd(x))
#
# apply(player.norm.dat[,-c(1:5)], 2, function(x) plot(density(x)))
#
# # ## KNN
# # KNN on full dataset
# set.seed(81)
# km.out <- kmeans(player.norm.dat[,-c(1:5)], centers = 10, nstart = 40)
# km.out
#
# # Decide how many clusters to look at
# n_clusters <- 30
#
# # Initialize total within sum of squares error: wss
# wss <- numeric(n_clusters)
#
# set.seed(3)
#
# # Look over 1 to n possible clusters
# for (i in 1:n_clusters) {
#   # Fit the model: km.out
#   km.out <- kmeans(player.norm.dat[,-c(1:5)], centers = i, nstart = 100)
#   # Save the within cluster sum of squares
#   wss[i] <- km.out$tot.withinss
# }
#
# # Produce a scree plot
# wss_df <- tibble(clusters = 1:n_clusters, wss = wss)
#
# scree_plot <- ggplot(wss_df, aes(x = clusters, y = wss, group = 1)) +
#   geom_point(size = 4)+
#   geom_line() +
#   scale_x_continuous(breaks = c(2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30)) +
#   xlab('Number of clusters')
# scree_plot
#
# scree_plot +
#   geom_hline(
#     yintercept = wss,
#     linetype = 'dashed',
#     col = c(rep('#000000',19),'#FF0000', rep('#000000',10))
#   )
# # Going with 13 clusters
# set.seed(110)
# km.out <- kmeans(player.norm.dat[,-c(1:6)], centers = 19, nstart = 140)
# km.out
#
# # Calculate euclidean distance between the first point and each other point in the dataset
# # Combine column 2 and column 1 of ws.dat to get unique name
# nms<-c()
# for(i in 1:nrow(player.dat)){
#   nms[i]<-paste0(player.dat$Name[i], " - ", player.dat$Position[i])
# }
# nms
#
# player.dat$Cluster<-km.out$cluster
# player.norm.dat$Cluster<-km.out$cluster
#
# (distances <- as.matrix(dist(player.norm.dat[,-c(1:5)], method = 'euclidean', diag = FALSE)))
# # Make 0s into NAs
# distances[distances == 0] <- NA
# distances.df<-as.data.frame(distances)
# colnames(distances.df)<-nms
# rownames(distances.df)<-nms
# distances.df
#
# # Export distances
# wb<-createWorkbook()
# addWorksheet(wb, "Distances")
# writeData(wb, "Distances", distances.df, rowNames = TRUE, colNames = TRUE)
# #saveWorkbook(wb, file = "./Output/Relief Pitcher Similarity Scores.xlsx", overwrite = TRUE)
########################################## Starting Pitchers #################################################
### Read in data
full.dat<-read_xlsx("./Data/FanGraphs Career Stats by Pos (P).xlsx", sheet = "P")
head(full.dat)
## Filter for necessary variables
player.dat<-full.dat %>%
filter(`POS` == "SP") %>%
# extract last 4 characters from Index
select(Name, `POS`,`HOF`, BALLOT, HOF, BALLOT, ACTIVE,
WP, ERA, W, `WAR`, `ERA-`, `K/9+`, `BB/9+`, `AVG+`, `WHIP+`, POS) %>%
rename(Position = `POS`)
# Remove Rows where "Name" is duplicated
player.dupe.dat<-player.dat[duplicated(paste0(player.dat$Name, " ", player.dat$Position)),]
player.dat<-player.dat[!duplicated(paste0(player.dat$Name, " ", player.dat$Position)),]
# Histogramps for each variable
apply(player.dat[,-c(1:5)], 2, function(x) hist(x))
## Z-Score Normalization of Predictor Variables
str(player.dat)
# Check if any NAs
sum(is.na(player.dat))
colnames(player.dat)[which(colSums(is.na(player.dat)) > 0)]
player.dat$ACTIVE[is.na(player.dat$ACTIVE)]<-0
# identify NA rows
which(apply(player.dat, 1, function(x) any(is.na(x))))
# Remove NA rows
if(length(which(apply(player.dat, 1, function(x) any(is.na(x)))) > 0)){
player.dat<-player.dat[-which(apply(player.dat, 1, function(x) any(is.na(x)))),]
}
player.norm.dat<-player.dat
player.norm.dat[,-c(1:5)]<-apply(player.dat[,-c(1:5)], 2, function(x) (x - mean(x))/sd(x))
apply(player.norm.dat[,-c(1:5)], 2, function(x) plot(density(x)))
player.norm.dat
# ## KNN
# KNN on full dataset
set.seed(81)
km.out <- kmeans(player.norm.dat[,-c(1:5)], centers = 10, nstart = 40)
km.out <- kmeans(player.norm.dat[,-c(1:5)], centers = 10, nstart = 50)
# ## KNN
# KNN on full dataset
set.seed(8)
km.out <- kmeans(player.norm.dat[,-c(1:5)], centers = 10, nstart = 50)
km.out <- kmeans(player.norm.dat[,-c(1:5)], centers = 10, nstart = 80)
# ## KNN
# KNN on full dataset
set.seed(88)
km.out <- kmeans(player.norm.dat[,-c(1:5)], centers = 10, nstart = 80)
km.out
# Decide how many clusters to look at
n_clusters <- 30
# Initialize total within sum of squares error: wss
wss <- numeric(n_clusters)
set.seed(88)
# Look over 1 to n possible clusters
for (i in 1:n_clusters) {
# Fit the model: km.out
km.out <- kmeans(player.norm.dat[,-c(1:5)], centers = i, nstart = 80)
# Save the within cluster sum of squares
wss[i] <- km.out$tot.withinss
}
# Produce a scree plot
wss_df <- tibble(clusters = 1:n_clusters, wss = wss)
scree_plot <- ggplot(wss_df, aes(x = clusters, y = wss, group = 1)) +
geom_point(size = 4)+
geom_line() +
scale_x_continuous(breaks = c(2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30)) +
xlab('Number of clusters')
scree_plot
scree_plot +
geom_hline(
yintercept = wss,
linetype = 'dashed',
col = c(rep('#000000',19),'#FF0000', rep('#000000',10))
)
# Going with 27 clusters
set.seed(110)
km.out <- kmeans(player.norm.dat[,-c(1:6)], centers = 27, nstart = 140)
# Going with 27 clusters
set.seed(88)
km.out <- kmeans(player.norm.dat[,-c(1:6)], centers = 27, nstart = 140)
km.out
# Going with 27 clusters
set.seed(88)
km.out <- kmeans(player.norm.dat[,-c(1:6)], centers = 10, nstart = 200)
# Going with 27 clusters
set.seed(7)
km.out <- kmeans(player.norm.dat[,-c(1:6)], centers = 10, nstart = 200)
km.out <- kmeans(player.norm.dat[,-c(1:6)], centers = 10, nstart = 180)
# Going with 27 clusters
set.seed(71)
km.out <- kmeans(player.norm.dat[,-c(1:6)], centers = 10, nstart = 180)
km.out <- kmeans(player.norm.dat[,-c(1:6)], centers = 10, nstart = 220)
# Going with 27 clusters
set.seed(234)
km.out <- kmeans(player.norm.dat[,-c(1:6)], centers = 10, nstart = 220)
km.out <- kmeans(player.norm.dat[,-c(1:6)], centers = 12, nstart = 220)
km.out
km.out <- kmeans(player.norm.dat[,-c(1:6)], centers = 11, nstart = 220)
# Going with 27 clusters
set.seed(2)
km.out <- kmeans(player.norm.dat[,-c(1:6)], centers = 11, nstart = 220)
?kmeans
# Going with 27 clusters
set.seed(2)
km.out <- kmeans(player.norm.dat[,-c(1:6)], centers = 12, nstart = 220, iter.max = 50)
km.out
# Calculate euclidean distance between the first point and each other point in the dataset
# Combine column 2 and column 1 of ws.dat to get unique name
nms<-c()
for(i in 1:nrow(player.dat)){
nms[i]<-paste0(player.dat$Name[i], " - ", player.dat$Position[i])
}
nms
player.dat$Cluster<-km.out$cluster
player.norm.dat$Cluster<-km.out$cluster
(distances <- as.matrix(dist(player.norm.dat[,-c(1:5)], method = 'euclidean', diag = FALSE)))
# Make 0s into NAs
distances[distances == 0] <- NA
distances.df<-as.data.frame(distances)
colnames(distances.df)<-nms
rownames(distances.df)<-nms
distances.df
# Export distances
wb<-createWorkbook()
addWorksheet(wb, "Distances")
writeData(wb, "Distances", distances.df, rowNames = TRUE, colNames = TRUE)
saveWorkbook(wb, file = "./Output/Starting Pitcher Similarity Scores.xlsx", overwrite = TRUE)
