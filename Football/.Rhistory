"div_rank", "division", "Make_SB", "seed")),
family = binomial) %>%
stepAIC(trace = FALSE)
# Model
model <- glm(Win_SB ~., data = train.data %>% dplyr::select(-c("id", "team", "season", "games",
"div_rank", "division", "Make_SB", "seed")),
family = binomial) %>%
stepAIC(trace = FALSE)
# Summarize the final selected model
summary(model)
# Split the data into training and test set
set.seed(23)
training.samples <- full.dat$Win_SB %>%
createDataPartition(p = 0.75, list = FALSE)
train.data  <- full.dat[training.samples, ]
test.data <- full.dat[-training.samples, ]
# Model
model <- glm(Win_SB ~., data = train.data %>% dplyr::select(-c("id", "team", "season", "games",
"div_rank", "division", "Make_SB", "seed")),
family = binomial) %>%
stepAIC(trace = FALSE)
# Summarize the final selected model
summary(model)
# Make predictions
probabilities <- model %>% predict(test.data, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, "pos", "neg")
# Model accuracy
mean(predicted.classes==test.data$Win_SB)
predicted.classes <- ifelse(probabilities > 0.5, 1, 0")
# Model accuracy
mean(predicted.classes==test.data$Win_SB)
predicted.classes <- ifelse(probabilities > 0.5, 1, 0)
"
predicted.classes <- ifelse(probabilities > 0.5, 1, 0)
# Model accuracy
mean(predicted.classes==test.data$Win_SB)
# Split the data into training and test set
set.seed(23)
training.samples <- full.dat$Make_SB %>%
createDataPartition(p = 0.75, list = FALSE)
train.data  <- full.dat[training.samples, ]
test.data <- full.dat[-training.samples, ]
# Model
model <- glm(Make_SB ~., data = train.data %>% dplyr::select(-c("id", "team", "season", "games",
"div_rank", "division", "Win_SB", "seed")),
family = binomial) %>%
stepAIC(trace = FALSE)
# Summarize the final selected model
summary(model)
# Make predictions
probabilities <- model %>% predict(test.data, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, 1, 0)
# Model accuracy
mean(predicted.classes==test.data$Win_SB)
# Split the data into training and test set
set.seed(233)
training.samples <- full.dat$Make_SB %>%
createDataPartition(p = 0.75, list = FALSE)
train.data  <- full.dat[training.samples, ]
test.data <- full.dat[-training.samples, ]
# Model
model <- glm(Make_SB ~., data = train.data %>% dplyr::select(-c("id", "team", "season", "games",
"div_rank", "division", "Win_SB", "seed")),
family = binomial) %>%
stepAIC(trace = FALSE)
# Summarize the final selected model
summary(model)
# Make predictions
probabilities <- model %>% predict(test.data, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, 1, 0)
# Model accuracy
mean(predicted.classes==test.data$Win_SB)
# Split the data into training and test set
set.seed(888)
training.samples <- full.dat$Make_SB %>%
createDataPartition(p = 0.75, list = FALSE)
train.data  <- full.dat[training.samples, ]
test.data <- full.dat[-training.samples, ]
# Model
model <- glm(Make_SB ~., data = train.data %>% dplyr::select(-c("id", "team", "season", "games",
"div_rank", "division", "Win_SB", "seed")),
family = binomial) %>%
stepAIC(trace = FALSE)
# Summarize the final selected model
summary(model)
# Make predictions
probabilities <- model %>% predict(test.data, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, 1, 0)
# Model accuracy
mean(predicted.classes==test.data$Win_SB)
# Split the data into training and test set
set.seed(8)
training.samples <- full.dat$Make_SB %>%
createDataPartition(p = 0.75, list = FALSE)
train.data  <- full.dat[training.samples, ]
test.data <- full.dat[-training.samples, ]
# Model
model <- glm(Make_SB ~., data = train.data %>% dplyr::select(-c("id", "team", "season", "games",
"div_rank", "division", "Win_SB", "seed")),
family = binomial) %>%
stepAIC(trace = FALSE)
# Summarize the final selected model
summary(model)
# Make predictions
probabilities <- model %>% predict(test.data, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, 1, 0)
# Model accuracy
mean(predicted.classes==test.data$Win_SB)
# Split the data into training and test set
set.seed(81)
training.samples <- full.dat$Make_SB %>%
createDataPartition(p = 0.75, list = FALSE)
train.data  <- full.dat[training.samples, ]
test.data <- full.dat[-training.samples, ]
# Model
model <- glm(Make_SB ~., data = train.data %>% dplyr::select(-c("id", "team", "season", "games",
"div_rank", "division", "Win_SB", "seed")),
family = binomial) %>%
stepAIC(trace = FALSE)
# Summarize the final selected model
summary(model)
# Make predictions
probabilities <- model %>% predict(test.data, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, 1, 0)
# Model accuracy
mean(predicted.classes==test.data$Win_SB)
# Split the data into training and test set
set.seed(808)
training.samples <- full.dat$Make_SB %>%
createDataPartition(p = 0.75, list = FALSE)
train.data  <- full.dat[training.samples, ]
test.data <- full.dat[-training.samples, ]
# Model
model <- glm(Make_SB ~., data = train.data %>% dplyr::select(-c("id", "team", "season", "games",
"div_rank", "division", "Win_SB", "seed")),
family = binomial) %>%
stepAIC(trace = FALSE)
# Summarize the final selected model
summary(model)
# Make predictions
probabilities <- model %>% predict(test.data, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, 1, 0)
# Model accuracy
mean(predicted.classes==test.data$Win_SB)
?stepAIC
# Split the data into training and test set
set.seed(11)
training.samples <- full.dat$Make_SB %>%
createDataPartition(p = 0.75, list = FALSE)
train.data  <- full.dat[training.samples, ]
test.data <- full.dat[-training.samples, ]
# Model
model <- glm(Make_SB ~., data = train.data %>% dplyr::select(-c("id", "team", "season", "games",
"div_rank", "division", "Win_SB", "seed")),
family = binomial) %>%
stepAIC(trace = TRUE)
# Summarize the final selected model
summary(model)
# Make predictions
probabilities <- model %>% predict(test.data, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, 1, 0)
# Model accuracy
mean(predicted.classes==test.data$Win_SB)
# Split the data into training and test set
set.seed(110)
training.samples <- full.dat$Make_SB %>%
createDataPartition(p = 0.75, list = FALSE)
train.data  <- full.dat[training.samples, ]
test.data <- full.dat[-training.samples, ]
# Model
model <- glm(Make_SB ~., data = train.data %>% dplyr::select(-c("id", "team", "season", "games",
"div_rank", "division", "Win_SB", "seed")),
family = binomial) %>%
stepAIC(trace = TRUE)
# Summarize the final selected model
summary(model)
# Make predictions
probabilities <- model %>% predict(test.data, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, 1, 0)
# Model accuracy
mean(predicted.classes==test.data$Win_SB)
# Split the data into training and test set
set.seed(77)
training.samples <- full.dat$Make_SB %>%
createDataPartition(p = 0.75, list = FALSE)
train.data  <- full.dat[training.samples, ]
test.data <- full.dat[-training.samples, ]
# Model
model <- glm(Make_SB ~., data = train.data %>% dplyr::select(-c("id", "team", "season", "games",
"div_rank", "division", "Win_SB", "seed", "ties", "losses", "wins")),
family = binomial) %>%
stepAIC(trace = TRUE)
# Summarize the final selected model
summary(model)
# Make predictions
probabilities <- model %>% predict(test.data, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, 1, 0)
# Model accuracy
mean(predicted.classes==test.data$Win_SB)
# Split the data into training and test set
set.seed(771)
training.samples <- full.dat$Make_SB %>%
createDataPartition(p = 0.75, list = FALSE)
train.data  <- full.dat[training.samples, ]
test.data <- full.dat[-training.samples, ]
# Model
model <- glm(Make_SB ~., data = train.data %>% dplyr::select(-c("id", "team", "season", "games",
"div_rank", "division", "Win_SB", "seed", "ties", "losses", "wins")),
family = binomial) %>%
stepAIC(trace = TRUE)
## Adjust some data points
full.dat$fumbles_lost<-full.dat$rushing_fumbles_lost + full.dat$sack_fumbles_lost
full.dat$sack_fumbles_lost<-NULL
full.dat$rushing_fumbles_lost<-NULL
full.dat<-openxlsx::read.xlsx("NFL team stats 2005-2024.xlsx")
colnames(full.dat)
colSums(is.na(full.dat))
## Clean data of missingness
full.dat$passing_cpoe<-NULL
full.dat$seed<-ifelse(is.na(full.dat$seed), 0, full.dat$seed)
full.dat<-na.omit(full.dat)
## Adjust some data points
full.dat$fumbles_lost<-full.dat$rushing_fumbles_lost + full.dat$sack_fumbles_lost
full.dat$sack_fumbles_lost<-NULL
full.dat$rushing_fumbles_lost<-NULL
# Stepwise variable selection for logistic regression
full.dat$Win_SB<-as.factor(full.dat$Win_SB)
full.dat$Make_SB<-as.factor(full.dat$Make_SB)
full.dat$seed<-as.factor(full.dat$seed)
# Split the data into training and test set
set.seed(771)
training.samples <- full.dat$Make_SB %>%
createDataPartition(p = 0.75, list = FALSE)
train.data  <- full.dat[training.samples, ]
test.data <- full.dat[-training.samples, ]
# Model
model <- glm(Make_SB ~., data = train.data %>% dplyr::select(-c("id", "team", "season", "games",
"div_rank", "division", "Win_SB", "seed", "ties", "losses", "wins")),
family = binomial) %>%
stepAIC(trace = TRUE)
# Summarize the final selected model
summary(model)
# Make predictions
probabilities <- model %>% predict(test.data, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, 1, 0)
# Model accuracy
mean(predicted.classes==test.data$Win_SB)
# Split the data into training and test set
set.seed(77)
training.samples <- full.dat$Make_SB %>%
createDataPartition(p = 0.75, list = FALSE)
train.data  <- full.dat[training.samples, ]
test.data <- full.dat[-training.samples, ]
# Model
model <- glm(Make_SB ~., data = train.data %>% dplyr::select(-c("id", "team", "season", "games",
"div_rank", "division", "Win_SB", "seed", "ties", "losses", "wins")),
family = binomial) %>%
stepAIC(trace = TRUE)
# Summarize the final selected model
summary(model)
# Make predictions
probabilities <- model %>% predict(test.data, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, 1, 0)
# Model accuracy
mean(predicted.classes==test.data$Win_SB)
# Split the data into training and test set
set.seed(888)
training.samples <- full.dat$Make_SB %>%
createDataPartition(p = 0.75, list = FALSE)
train.data  <- full.dat[training.samples, ]
test.data <- full.dat[-training.samples, ]
# Model
model <- glm(Make_SB ~., data = train.data %>% dplyr::select(-c("id", "team", "season", "games",
"div_rank", "division", "Win_SB", "seed", "ties", "losses", "wins")),
family = binomial) %>%
stepAIC(trace = TRUE)
# Summarize the final selected model
summary(model)
# Make predictions
probabilities <- model %>% predict(test.data, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, 1, 0)
# Model accuracy
mean(predicted.classes==test.data$Win_SB)
# Split the data into training and test set
set.seed(88)
training.samples <- full.dat$Make_SB %>%
createDataPartition(p = 0.75, list = FALSE)
train.data  <- full.dat[training.samples, ]
test.data <- full.dat[-training.samples, ]
# Model
model <- glm(Make_SB ~., data = train.data %>% dplyr::select(-c("id", "team", "season", "games",
"div_rank", "division", "Win_SB", "seed", "ties", "losses", "wins")),
family = binomial) %>%
stepAIC(trace = TRUE)
# Summarize the final selected model
summary(model)
# Make predictions
probabilities <- model %>% predict(test.data, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, 1, 0)
# Model accuracy
mean(predicted.classes==test.data$Win_SB)
# Split the data into training and test set
set.seed(1234)
training.samples <- full.dat$Make_SB %>%
createDataPartition(p = 0.75, list = FALSE)
train.data  <- full.dat[training.samples, ]
test.data <- full.dat[-training.samples, ]
# Model
model <- glm(Make_SB ~., data = train.data %>% dplyr::select(-c("id", "team", "season", "games",
"div_rank", "division", "Win_SB", "seed", "ties", "losses", "wins")),
family = binomial) %>%
stepAIC(trace = TRUE)
# Summarize the final selected model
summary(model)
# Make predictions
probabilities <- model %>% predict(test.data, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, 1, 0)
# Model accuracy
mean(predicted.classes==test.data$Win_SB)
# Split the data into training and test set
set.seed(33)
training.samples <- full.dat$Make_SB %>%
createDataPartition(p = 0.75, list = FALSE)
train.data  <- full.dat[training.samples, ]
test.data <- full.dat[-training.samples, ]
# Model
model <- glm(Make_SB ~., data = train.data %>% dplyr::select(-c("id", "team", "season", "games",
"div_rank", "division", "Win_SB", "seed", "ties", "losses", "wins")),
family = binomial) %>%
stepAIC(trace = TRUE)
# Summarize the final selected model
summary(model)
# Make predictions
probabilities <- model %>% predict(test.data, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, 1, 0)
# Model accuracy
mean(predicted.classes==test.data$Win_SB)
# Split the data into training and test set
set.seed(331)
training.samples <- full.dat$Make_SB %>%
createDataPartition(p = 0.75, list = FALSE)
train.data  <- full.dat[training.samples, ]
test.data <- full.dat[-training.samples, ]
# Model
model <- glm(Make_SB ~., data = train.data %>% dplyr::select(-c("id", "team", "season", "games",
"div_rank", "division", "Win_SB", "seed", "ties", "losses", "wins")),
family = binomial) %>%
stepAIC(trace = TRUE)
# Summarize the final selected model
summary(model)
# Make predictions
probabilities <- model %>% predict(test.data, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, 1, 0)
# Model accuracy
mean(predicted.classes==test.data$Win_SB)
# Split the data into training and test set
set.seed(22)
training.samples <- full.dat$Make_SB %>%
createDataPartition(p = 0.75, list = FALSE)
train.data  <- full.dat[training.samples, ]
test.data <- full.dat[-training.samples, ]
# Model
model <- glm(Make_SB ~., data = train.data %>% dplyr::select(-c("id", "team", "season", "games",
"div_rank", "division", "Win_SB", "seed", "ties", "losses", "wins")),
family = binomial) %>%
stepAIC(trace = TRUE)
# Summarize the final selected model
summary(model)
# Make predictions
probabilities <- model %>% predict(test.data, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, 1, 0)
# Model accuracy
mean(predicted.classes==test.data$Win_SB)
# Split the data into training and test set
set.seed(44)
training.samples <- full.dat$Make_SB %>%
createDataPartition(p = 0.75, list = FALSE)
train.data  <- full.dat[training.samples, ]
test.data <- full.dat[-training.samples, ]
# Model
model <- glm(Make_SB ~., data = train.data %>% dplyr::select(-c("id", "team", "season", "games",
"div_rank", "division", "Win_SB", "seed", "ties", "losses", "wins")),
family = binomial) %>%
stepAIC(trace = TRUE)
# Split the data into training and test set
set.seed(441)
training.samples <- full.dat$Make_SB %>%
createDataPartition(p = 0.75, list = FALSE)
train.data  <- full.dat[training.samples, ]
test.data <- full.dat[-training.samples, ]
# Model
model <- glm(Make_SB ~., data = train.data %>% dplyr::select(-c("id", "team", "season", "games",
"div_rank", "division", "Win_SB", "seed", "ties", "losses", "wins")),
family = binomial) %>%
stepAIC(trace = TRUE)
# Summarize the final selected model
summary(model)
# Make predictions
probabilities <- model %>% predict(test.data, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, 1, 0)
# Model accuracy
mean(predicted.classes==test.data$Win_SB)
# Confusion matrix
table(test.data$Win_SB, predicted.classes)
# Split the data into training and test set
set.seed(441)
training.samples <- full.dat$Make_SB %>%
createDataPartition(p = 1, list = FALSE)
train.data  <- full.dat[training.samples, ]
test.data <- full.dat[-training.samples, ]
# Model
model <- glm(Make_SB ~., data = train.data %>% dplyr::select(-c("id", "team", "season", "games",
"div_rank", "division", "Win_SB", "seed", "ties", "losses", "wins")),
family = binomial) %>%
stepAIC(trace = TRUE)
# Summarize the final selected model
summary(model)
# Make predictions
probabilities <- model %>% predict(test.data, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, 1, 0)
# Make predictions
probabilities <- model %>% predict(train.data, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, 1, 0)
# Model accuracy
mean(predicted.classes==test.data$Win_SB)
# Make predictions
probabilities <- model %>% predict(train.data, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, 1, 0)
# Model accuracy
mean(predicted.classes==train.data$Win_SB)
# Split the data into training and test set
set.seed(440)
training.samples <- full.dat$Make_SB %>%
createDataPartition(p = 1, list = FALSE)
train.data  <- full.dat[training.samples, ]
test.data <- full.dat[-training.samples, ]
# Model
model <- glm(Make_SB ~., data = train.data %>% dplyr::select(-c("id", "team", "season", "games",
"div_rank", "division", "Win_SB", "seed", "ties", "losses", "wins")),
family = binomial) %>%
stepAIC(trace = TRUE)
# Summarize the final selected model
summary(model)
# Make predictions
probabilities <- model %>% predict(train.data, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, 1, 0)
# Model accuracy
mean(predicted.classes==train.data$Win_SB)
# Confusion matrix
table(test.data$Win_SB, predicted.classes)
# Confusion matrix
table(train.data$Win_SB, predicted.classes)
# Sensitivity
sensitivity <- table(train.data$Win_SB, predicted.classes)[2,2] / sum(table(train.data$Win_SB, predicted.classes)[2,])
sensitivity
predicted.classes <- ifelse(probabilities > 0.8, 1, 0)
# Model accuracy
mean(predicted.classes==train.data$Win_SB)
# Confusion matrix
table(train.data$Win_SB, predicted.classes)
# Sensitivity
sensitivity <- table(train.data$Win_SB, predicted.classes)[2,2] / sum(table(train.data$Win_SB, predicted.classes)[2,])
predicted.classes <- ifelse(probabilities > 0.2, 1, 0)
# Model accuracy
mean(predicted.classes==train.data$Win_SB)
# Confusion matrix
table(train.data$Win_SB, predicted.classes)
# Sensitivity
sensitivity <- table(train.data$Win_SB, predicted.classes)[2,2] / sum(table(train.data$Win_SB, predicted.classes)[2,])
sensitivity
predicted.classes <- ifelse(probabilities > 0.1, 1, 0)
# Model accuracy
mean(predicted.classes==train.data$Win_SB)
# Confusion matrix
table(train.data$Win_SB, predicted.classes)
# Sensitivity
sensitivity <- table(train.data$Win_SB, predicted.classes)[2,2] / sum(table(train.data$Win_SB, predicted.classes)[2,])
sensitivity
# Confusion matrix
table(train.data$Win_SB, predicted.classes)
# Calculate Sensitivity and specificity
sensitivity <- sum(predicted.classes[train.data$Win_SB == 1] == 1) / sum(train.data$Win_SB == 1)
specificity <- sum(predicted.classes[train.data$Win_SB == 0] == 0) / sum(train.data$Win_SB == 0)
sensitivity
specificity
# Split the data into training and test set
set.seed(40)
training.samples <- full.dat$Make_SB %>%
createDataPartition(p = 1, list = FALSE)
train.data  <- full.dat[training.samples, ]
test.data <- full.dat[-training.samples, ]
# Model
model <- glm(Make_SB ~., data = train.data %>% dplyr::select(-c("id", "team", "season", "games",
"div_rank", "division", "Win_SB", "seed", "ties", "losses", "wins")),
family = binomial) %>%
stepAIC(trace = TRUE)
# Summarize the final selected model
summary(model)
# Make predictions
probabilities <- model %>% predict(train.data, type = "response")
predicted.classes <- ifelse(probabilities > 0.1, 1, 0)
# Model accuracy
mean(predicted.classes==train.data$Win_SB)
# Confusion matrix
table(train.data$Win_SB, predicted.classes)
predicted.classes <- ifelse(probabilities > 0.14, 1, 0)
# Model accuracy
mean(predicted.classes==train.data$Win_SB)
# Confusion matrix
table(train.data$Win_SB, predicted.classes)
# Calculate Sensitivity and specificity
sensitivity <- sum(predicted.classes[train.data$Win_SB == 1] == 1) / sum(train.data$Win_SB == 1)
