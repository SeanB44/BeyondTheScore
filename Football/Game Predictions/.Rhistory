# function to calculate z sore to put 3 roster variables on same scale
calculate_z_score <- function(x) {
z_score <- (x - mean(x)) / sd(x)
return(z_score)
}
mod.dat$portal_score_home<-calculate_z_score(mod.dat$portal_score_home)
mod.dat$portal_score_away<-calculate_z_score(mod.dat$portal_score_away)
mod.dat$recruiting_score_home<-calculate_z_score(mod.dat$recruiting_score_home)
mod.dat$recruiting_score_away<-calculate_z_score(mod.dat$recruiting_score_away)
mod.dat$returning_ppa_home<-calculate_z_score(mod.dat$returning_ppa_home)
mod.dat$recruiting_score_away<-calculate_z_score(mod.dat$returning_ppa_away)
#home
for (i in 1:nrow(mod.dat)) {
mod.dat$return_recruit_portal_home[i]<-mean(mod.dat$returning_ppa_home[i], mod.dat$recruiting_score_home[i], mod.dat$portal_score_home[i])
}
#away
for (i in 1:nrow(mod.dat)) {
mod.dat$return_recruit_portal_away[i]<-mean(mod.dat$returning_ppa_away[i], mod.dat$recruiting_score_away[i], mod.dat$portal_score_away[i])
}
cor(mod.dat$difference,mod.dat$return_recruit_portal_home) #0.297
cor(mod.dat$difference,mod.dat$return_recruit_portal_away) #-0.232 not good
mod.dat$return_recruit_portal_diff<-mod.dat$return_recruit_portal_home-mod.dat$return_recruit_portal_away
cor(mod.dat$difference,mod.dat$return_recruit_portal_diff) #0.23 (no better)
mod.dat$return_recruit_portal_away<-mod.dat$return_recruit_portal_home<-mod.dat$recruiting_score_home<-mod.dat$recruiting_score_away<-mod.dat$portal_score_away<-mod.dat$portal_score_home<-NULL
mod.dat$return_recruit_portal_diff<-NULL
mod.dat$returning_ppa_home<-mod.dat$returning_ppa_away<-mod.dat$returning_ppa_diff<-NULL
## Remove Advanced stats (none were very correlated)
names(mod.dat)
mod.dat<-mod.dat%>%
dplyr::select(-c(off_havoc_total_home, off_explosiveness_home,
off_havoc_total_away, off_explosiveness_away,
def_havoc_total_home, def_havoc_total_away,
def_explosiveness_home, def_explosiveness_away,
off_total_ppa_home, off_total_ppa_away,def_total_ppa_home, def_total_ppa_away,
turnovers_home, turnovers_away,
penalty_yds_home, penalty_yds_away,
third_down_convs_home, third_down_convs_away
))
## Re-check correlations among remaining variables
names(mod.dat)
cor.matrix.diffs<-t(cor(mod.dat$difference, mod.dat[,-c(1:5)]))
cor.matrix.diffs[order(cor.matrix.diffs[,1], decreasing = T),]
## Order Variables for modelling
names(mod.dat)
mod.dat$home_win<-NULL #do not need Win or Loss, modeling difference
mod.dat<-mod.dat[,c(1:6,8,17,9:16,7)]
names(mod.dat)
mod.dat<-na.omit(mod.dat)
###### Modelling ######
set.seed(109)
# set.seed(8)
train<-sample(1:nrow(mod.dat), nrow(mod.dat)*.667, replace = F)
test<-which(!c(1:nrow(mod.dat)) %in% train)
str(mod.dat)
### MODEL 1: RAW DATA, ALL VARIABLES ###
model1.dat<-mod.dat[train,]
mod1.test.dat<-mod.dat[test,]
fit.1 <- lm(difference ~., data = model1.dat[,-c(1:5)])
summary(fit.1) #rsq=0.696
# Predict
mod1.preds<-round(predict(fit.1, mod1.test.dat[, -c(1:5)] ), 1)
mod1.test.dat$predicted<-mod1.preds
# Total Difference
sum(mod1.test.dat$predicted-mod1.test.dat$difference)
### MODEL 1: RAW DATA, ALL VARIABLES ###
model1.dat<-mod.dat[train,]
mod1.test.dat<-mod.dat[test,]
model1.dat[,-c(1:5)]
#### Model 1 is Best!!!!! #####
##Re-run model 1
set.seed(888)
train<-sample(1:nrow(mod.dat), nrow(mod.dat)*.667, replace = F)
test<-which(!c(1:nrow(mod.dat)) %in% train)
str(mod.dat)
model1.dat<-mod.dat[train,]
mod1.test.dat<-mod.dat[test,]
View(model1.dat)
cor.matrix<-cor(mod.dat$difference, mod.dat$spread_home)
cor.matrix
cor(mod.dat$difference, mod.dat$spread_home)
plot(mod.dat$difference, mod.dat$spread_home)
model1.dat<-mod.dat[train,]
mod1.test.dat<-mod.dat[test,]
fit.1 <- lm(difference ~., data = model1.dat[,-c(1:5)])
summary(fit.1) #rsq=0.745
plot(model1.dat$difference, model1.dat$spread_home)
lm(difference ~ spread_home, data = model1.dat)
plot(model1.dat$difference, model1.dat$spread_home)
fit.1 <- lm(difference ~., data = model1.dat[,-c(1:5)])
summary(fit.1) #rsq=0.745
# Predict
mod1.preds<-round(predict(fit.1, mod1.test.dat[, -c(1:5)] ), 1)
mod1.test.dat$predicted<-mod1.preds
# Total Absolute Difference
sum(abs(mod1.test.dat$predicted-mod1.test.dat$difference))
# Mean Absolute Difference
mean(abs(mod1.test.dat$predicted-mod1.test.dat$difference)) #8.28
plot(mod1.test.dat$predicted,mod1.test.dat$difference)
# Correct side
mod1.test.dat$side<-ifelse((mod1.test.dat$predicted<0 & mod1.test.dat$difference<0) | (mod1.test.dat$predicted>0 & mod1.test.dat$difference>0),1,0 )
sum(mod1.test.dat$side)/nrow(mod1.test.dat) #86.9
# Cover Spread
mod1.test.dat$spread<-(-1*mod1.test.dat$spread_home)
mod1.test.dat$cover<-ifelse(mod1.test.dat$difference>=mod1.test.dat$spread,1,0)
mod1.test.dat$pred_cover<-ifelse(mod1.test.dat$predicted>=mod1.test.dat$spread,1,0)
mod1.test.dat$pred_cover_correct<-ifelse(mod1.test.dat$cover==mod1.test.dat$pred_cover,1,0)
sum(mod1.test.dat$pred_cover_correct)/nrow(mod1.test.dat) #73.0%
xtabs(~pred_cover+cover, mod1.test.dat) # Most common error is predicting no cover when actually does cover
mod1.test.dat$spread
mod1.test.dat$spread_home<-mod1.test.dat$spread_home*-1
# Predict
mod1.preds<-round(predict(fit.1, mod1.test.dat[, -c(1:5)] ), 1)
mod1.test.dat$predicted<-mod1.preds
# Total Absolute Difference
sum(abs(mod1.test.dat$predicted-mod1.test.dat$difference))
# Mean Absolute Difference
mean(abs(mod1.test.dat$predicted-mod1.test.dat$difference)) #8.28
plot(mod1.test.dat$predicted,mod1.test.dat$difference)
# Correct side
mod1.test.dat$side<-ifelse((mod1.test.dat$predicted<0 & mod1.test.dat$difference<0) | (mod1.test.dat$predicted>0 & mod1.test.dat$difference>0),1,0 )
sum(mod1.test.dat$side)/nrow(mod1.test.dat) #86.9
## Libraries ##
library(httr)
library(dplyr)
library(ggplot2)
library(e1071)
library(caret)
library(XML)
library(readxl)
library(tidyr)
library(tidyverse)
library(openxlsx)
library(domir)
# # pacman::p_load_current_gh("sportsdataverse/cfbfastR", dependencies = TRUE, update = TRUE)
library(cfbfastR)
library(zoo)
library(RCurl)
library(rvest)
library (ISLR2)
library(leaps)
library(car)
library(pls)
usethis::edit_r_environ()
#Sys.setenv(CFBD_API_KEY = "OJOCuvsvPW4SIhLZPbr3/Pw8vaoASLKFX5yKTD28+Su7YvPZAPfHQl55pB3CADjm")
calculate_z_score <- function(x) {
z_score <- (x - mean(x)) / sd(x)
return(z_score)
}
# # Export Workbook Function ###
source("./Point Differential Model.R")
model<-final.model
#WinProb<-prob.model
year<-2024
wk<-1
date<-today()
wb<-loadWorkbook('./Output/CFB Prediction Tool - Week 1 - 2024 (2024-08-24).xlsx')
## Export coefficients
(coefs<-t(data.frame(model$coefficients)))
writeData(wb, 'Coefficients', coefs)
# (coefs_prob<-t(data.frame(WinProb$coefficients)))
# writeData(wb, 'Coefficients - Win Probability', coefs_prob)
## Initiate team info dataframe
teams<-cfbd_team_info()%>%
dplyr::select(team_id,school, conference)
## Pull current ELO data
if(wk == 1){
teams<-left_join(teams, cfbd_ratings_elo(year=year-1, week=15)%>%
dplyr::select(team, elo)%>%
rename(school=team),
by="school")
teams$elo<-teams$elo*0.79 #Predict next year's elo from last
}else{
## Pull current ELO data
teams<-left_join(teams, cfbd_ratings_elo(year=year, week=wk)%>%
dplyr::select(team, elo)%>%
rename(school=team),
by="school")
}
## Pull Current FPI
teams<-left_join(teams, espn_ratings_fpi(year)%>%
dplyr::select(team_id, fpi),
by = "team_id")
## Pull Predictive Power Rank
url <- paste0("https://www.teamrankings.com/ncf/rankings/teams/?date=",date)
html_code <- read_html(url) # Read the HTML code of the page
table_html <- html_code %>% html_nodes("table") %>% .[[1]] # Use the html_nodes function to extract the table
# Use the html_table function to convert the table HTML code into a data frame
table_df <- table_html %>% html_table()
# Inspect the first few rows of the data frame
head(table_df)
# Align names
table_df$Team<-ifelse(table_df$Team=="Central Florida Knights", "UCF", table_df$Team)
table_df$Team<-ifelse(table_df$Team=="Florida Atlantic Owls", "Florida Atlantic", table_df$Team)
table_df$Team<-ifelse(table_df$Team=="Florida Gators", "Florida", table_df$Team)
table_df$Team<-ifelse(table_df$Team=="Louisiana State Tigers", "LSU", table_df$Team)
table_df$Team<-ifelse(table_df$Team=="Louisiana Tech Bulldogs", "Louisiana Tech", table_df$Team)
table_df$Team<-ifelse(table_df$Team=="UL Monroe Warhawks", "Louisiana Monroe", table_df$Team)
table_df$Team<-ifelse(table_df$Team=="Louisiana Ragin' Cajuns", "Louisiana", table_df$Team)
table_df$Team<-ifelse(table_df$Team=="Massachusetts Minutemen", "UMass", table_df$Team)
table_df$Team<-ifelse(table_df$Team=="Miami Hurricanes", "Miami", table_df$Team)
table_df$Team<-ifelse(table_df$Team=="Michigan Wolverines", "Michigan", table_df$Team)
table_df$Team<-ifelse(table_df$Team=="Mississippi Rebels", "Ole Miss", table_df$Team)
table_df$Team<-ifelse(table_df$Team=="Southern Methodist Mustangs", "SMU", table_df$Team)
table_df$Team<-ifelse(table_df$Team=="Southern California Trojans", "USC", table_df$Team)
table_df$Team<-ifelse(table_df$Team=="Texas Christian Horned Frogs", "TCU", table_df$Team)
table_df$Team<-ifelse(table_df$Team=="Texas El Paso Miners", "UTEP", table_df$Team)
table_df$Team<-ifelse(table_df$Team=="Texas St. Bobcats", "Texas State", table_df$Team)
table_df$Team<-ifelse(table_df$Team=="Texas Longhorns", "Texas", table_df$Team)
table_df$Team<-ifelse(table_df$Team=="Texas Tech Red Raiders", "Texas Tech", table_df$Team)
table_df$Team<-ifelse(table_df$Team=="Texas-San Antonio Roadrunners", "UT San Antonio", table_df$Team)
table_df$Team<-ifelse(table_df$Team=="Utah Utes", "Utah", table_df$Team)
table_df$Team<-ifelse(table_df$Team=="Utah Utes", "Utah", table_df$Team)
table_df$Team<-ifelse(table_df$Team=="Arizona State Sun Devils", "Arizona State", table_df$Team)
table_df$Team<-ifelse(table_df$Team=="Arizona Wildcats", "Arizona", table_df$Team)
table_df$Team<-ifelse(table_df$Team=="Brigham Young Cougars", "BYU", table_df$Team)
table_df$Team<-ifelse(table_df$Team=="UL Lafayette Ragin' Cajuns", "Louisiana", table_df$Team)
## Remove Kennessaw St. for now (No data)
table_df<-table_df[-which(table_df$Team == "Kennesaw St. Owls"),]
# Confirm name matching
name_match_temp<-data.frame(
PwrRk = table_df$Team[order(table_df$Team)],
team_info_name = team_info.dat$school[order(team_info.dat$school)]
)
#name_match_temp
# Order Dataframes for school merging
table_df<-table_df[order(table_df$Team),]
team_info.dat<-team_info.dat[order(team_info.dat$school),]
table_df<-table_df%>%
dplyr::select(-`In Conf.`)
# Rename columns
names(table_df)<-c("school","Predictive_PwrRk", "Home_PwrRk", "Away_PwrRk", "Last5_PwrRk", "SOS_PwrRk" )
# Update school name
table_df$school<-team_info.dat$school
# Create Power ranking dataframe
PwrRk.dat<-table_df
PwrRk.dat$PWr_Rk_Avg<-rowMeans(PwrRk.dat[,-1])
PwrRk.dat<-PwrRk.dat%>%
dplyr::select(school, PWr_Rk_Avg)
teams<-left_join(teams, PwrRk.dat, by="school")
## Postgame WP - Need to make 2 seperate dataframes then combine
# home team wp
home_post_wp.dat<-cfbd_game_info(year, season = "regular")%>%
filter(week<wk)%>%
mutate(school = home_team)%>%
mutate(post_win_prob = home_post_win_prob)%>%
dplyr::select(school, post_win_prob)
# away team wp
away_post_wp.dat<-cfbd_game_info(year, season = "regular")%>%
filter(week<wk)%>%
mutate(school = away_team)%>%
mutate(post_win_prob = away_post_win_prob)%>%
dplyr::select(school, post_win_prob)
# combine
post_wp.dat<-rbind(home_post_wp.dat,
away_post_wp.dat)
# clean up
names(post_wp.dat)<-c("school","postgame_wp")
post_wp.dat$postgame_wp<-round(as.numeric(post_wp.dat$postgame_wp),3)
if(wk != 1){
post_wp.dat<-data.frame(aggregate(postgame_wp ~ school, data=post_wp.dat, mean))
}
# join
teams<-left_join(teams, post_wp.dat, by="school")
## SP Plus
teams<-left_join(teams,cfbd_ratings_sp(year)%>%
dplyr::select(team, rating)%>%
rename(school = team)%>%
rename(sp_plus = rating),
#filter(school == home_team[i]| school == away_team[i]),
by = c("school"))
## AP Rank
temp.AP<-cfbd_rankings(year, week = wk)%>%
filter(poll == "AP Top 25")%>%
rename(year = season)%>%
dplyr::select(year, school, rank)%>%
rename(AP_rank = rank)
# make binary - ranked/not ranked
temp.AP$AP_rank<-ifelse(temp.AP$AP_rank>0, 1,0)
temp.AP<-temp.AP[,-1]
teams<-left_join(teams, temp.AP, by = "school")
## SRS
if(wk == 1){
# read in data
url <- paste0("https://www.sports-reference.com/cfb/years/",year-1,"-ratings.html")
html_code <- read_html(url) # Read the HTML code of the page
table_html <- html_code %>% html_nodes("table") %>% .[[1]] # Use the html_nodes function to extract the table
# Use the html_table function to convert the table HTML code into a data frame
table_df <- table_html %>% html_table()
# Inspect the first few rows of the data frame
head(table_df)
#correct column names
colnames(table_df)<-table_df[1,]
table_df<-table_df[-1,]
# SRS name Changes to align with Schedule
table_df$School[which(!table_df$School %in% team_info.dat$school)]
table_df$School<-ifelse(table_df$School=="Miami (FL)", "Miami",
ifelse(table_df$School=="Texas Christian", "TCU",
ifelse(table_df$School=="Louisiana-Monroe", "Louisiana Monroe",
ifelse(table_df$School=="Middle Tennessee State", "Middle Tennessee",
ifelse(table_df$School=="UTSA", "UT San Antonio",
ifelse(table_df$School=="Nevada-Las Vegas", "UNLV",
ifelse(table_df$School=="North Carolina State", "NC State",
ifelse(table_df$School=="Hawaii", "Hawai'i",
ifelse(table_df$School=="Massachusetts", "UMass",
ifelse(table_df$School=="Pitt", "Pittsburgh",
ifelse(table_df$School=="Sam Houston", "Sam Houston State",
ifelse(table_df$School=="Kennesaw State", "Kennesaw St",
ifelse(table_df$School=="San Jose State", "San José State", table_df$School)))))))))))))
# select necessary data
table_df<-table_df%>%
dplyr::select(c(School, SRS, W, L))%>%
rename(school = School)
table_df$W<-as.numeric(table_df$W)
table_df$L<-as.numeric(table_df$L)
# Calculate winning percentage and remove unneeded W/L columns
table_df$win_pct<-(table_df$W/(table_df$W+table_df$L))
table_df$W<-NULL
table_df$L<-NULL
table_df$SRS<- as.numeric(table_df$SRS)*.73 #Regress
teams<-left_join(teams, table_df, by = "school")
}else{
# read in data
url <- paste0("https://www.sports-reference.com/cfb/years/",year,"-ratings.html")
html_code <- read_html(url) # Read the HTML code of the page
table_html <- html_code %>% html_nodes("table") %>% .[[1]] # Use the html_nodes function to extract the table
# Use the html_table function to convert the table HTML code into a data frame
table_df <- table_html %>% html_table()
# Inspect the first few rows of the data frame
head(table_df)
#correct column names
colnames(table_df)<-table_df[1,]
table_df<-table_df[-1,]
# SRS name Changes to align with Schedule
table_df$School[which(!table_df$School %in% team_info.dat$school)]
table_df$School<-ifelse(table_df$School=="Miami (FL)", "Miami",
ifelse(table_df$School=="Texas Christian", "TCU",
ifelse(table_df$School=="Louisiana-Monroe", "Louisiana Monroe",
ifelse(table_df$School=="Middle Tennessee State", "Middle Tennessee",
ifelse(table_df$School=="UTSA", "UT San Antonio",
ifelse(table_df$School=="Nevada-Las Vegas", "UNLV",
ifelse(table_df$School=="North Carolina State", "NC State",
ifelse(table_df$School=="Hawaii", "Hawai'i",
ifelse(table_df$School=="Massachusetts", "UMass",
ifelse(table_df$School=="Pitt", "Pittsburgh",
ifelse(table_df$School=="Sam Houston", "Sam Houston State",
ifelse(table_df$School=="Kennesaw State", "Kennesaw St",
ifelse(table_df$School=="San Jose State", "San José State", table_df$School)))))))))))))
# select necessary data
table_df<-table_df%>%
dplyr::select(c(School, SRS, W, L))%>%
rename(school = School)
table_df$W<-as.numeric(table_df$W)
table_df$L<-as.numeric(table_df$L)
# Calculate winning percentage and remove unneeded W/L columns
table_df$win_pct<-(table_df$W/(table_df$W+table_df$L))
table_df$W<-NULL
table_df$L<-NULL
teams<-left_join(teams, table_df, by = "school")
}
## FEI Efficiency Data
if(wk == 1){
url <- paste0("https://www.bcftoys.com/",year-1,"-fei/")
html_code <- read_html(url)
table_html <- html_code %>% html_nodes("table") %>% .[[1]]
# Use the html_table function to convert the table
# HTML code into a data frame
table_df <- table_html %>% html_table()
# Inspect the first few rows of the data frame
head(table_df)
colnames(table_df)<-table_df[2,]
table_df<-table_df[-c(1:2),]
table_df<-table_df[-c(which(is.na(table_df$Team))),]
table_df$Team[which(!table_df$Team%in%team_info.dat$school)]
table_df$Team<-ifelse(table_df$Team=="Massachusetts", "UMass",
ifelse(table_df$Team == "Sam Houston", "Sam Houston State",
ifelse(table_df$Team=="Hawaii", "Hawai'i",
ifelse(table_df$Team=="UTSA", "UT San Antonio",
ifelse(table_df$Team=="UL Monroe", "Louisiana Monroe",
ifelse(table_df$Team == "San Jose State", "San José State",table_df$Team))))))
FEI.dat<-table_df%>%
dplyr::select(Team, FEI)%>%
rename(school = Team)
teams<-left_join(teams, FEI.dat, by = "school")
}else{
url <- paste0("https://www.bcftoys.com/",year,"-fei/")
html_code <- read_html(url)
table_html <- html_code %>% html_nodes("table") %>% .[[1]]
# Use the html_table function to convert the table
# HTML code into a data frame
table_df <- table_html %>% html_table()
# Inspect the first few rows of the data frame
head(table_df)
colnames(table_df)<-table_df[2,]
table_df<-table_df[-c(1:2),]
table_df<-table_df[-c(which(is.na(table_df$Team))),]
table_df$Team[which(!table_df$Team%in%team_info.dat$school)]
table_df$Team<-ifelse(table_df$Team=="Massachusetts", "UMass",
ifelse(table_df$Team == "Sam Houston", "Sam Houston State",
ifelse(table_df$Team=="Hawaii", "Hawai'i",
ifelse(table_df$Team=="UTSA", "UT San Antonio",
ifelse(table_df$Team=="UL Monroe", "Louisiana Monroe",
ifelse(table_df$Team == "San Jose State", "San José State",table_df$Team))))))
FEI.dat<-table_df%>%
dplyr::select(Team, FEI)%>%
rename(school = Team)
teams<-left_join(teams, FEI.dat, by = "school")
}
## Add Schedule
cfbd_schedule<-cfbd_game_info(year, season = "regular")%>%
filter(week==wk)%>%
dplyr::select(week,start_date, home_team, away_team, home_pregame_elo, away_pregame_elo, neutral_site)
writeData(wb, 'Schedule',cfbd_schedule)
## Add betting lines
cfbd_betting_lines(year=year, week=wk)
## Add betting lines
Betting_lines.dat<-cfbd_betting_lines(year=year, week=wk)%>%
dplyr::select(week, home_team, away_team, provider, spread_open, spread, over_under,over_under_open, home_moneyline, away_moneyline)%>%
filter(provider == "Draftkings")
addWorksheet(wb, 'Betting Lines')
writeData(wb, 'Betting Lines', Betting_lines.dat)
source('../../../Football Functions.R')
source('./Point Differential Model.R')
### Model to use ###
summary(final.model)
PointDiff.model<-final.model
# source('./Win Probability Model.R')
# summary(prob.model)
# WinProb.model<-prob.model
# Load Workbook
wb<-loadWorkbook('./Output/CFB Prediction Tool - Week 1 - 2024 (2024-08-24).xlsxCFB Prediction Tool - Week 1 - 2024.xlsx')
source('../../../Football Functions.R')
source('./Point Differential Model.R')
### Model to use ###
summary(final.model)
PointDiff.model<-final.model
# source('./Win Probability Model.R')
# summary(prob.model)
# WinProb.model<-prob.model
# Load Workbook
wb<-loadWorkbook('./Output/CFB Prediction Tool - Week 1 - 2024 (2024-08-24).xlsx')
### Apply Function and Export Current Workbook ###
## Inputs
model<-PointDiff.model
#WinProb<-WinProb.model
year <-2024
wk<-1
date <- today()
wb<-wb
# Run Function
Gen_Tool_cfb(model, year, wk, date, wb = wb)
cfbd_betting_lines(year=year, week=wk)
cfbd_betting_lines(year=year, week=wk)
source('../../../Football Functions.R')
source('./Point Differential Model.R')
### Model to use ###
summary(final.model)
PointDiff.model<-final.model
# source('./Win Probability Model.R')
# summary(prob.model)
# WinProb.model<-prob.model
# Load Workbook
wb<-loadWorkbook('./Output/CFB Prediction Tool - Week 1 - 2024 (2024-08-24).xlsx')
### Apply Function and Export Current Workbook ###
## Inputs
model<-PointDiff.model
#WinProb<-WinProb.model
year <-2024
wk<-1
date <- today()
wb<-wb
# Run Function
Gen_Tool_cfb(model, year, wk, date, wb = wb)
source('../../../Football Functions.R')
source('./Point Differential Model.R')
### Model to use ###
summary(final.model)
PointDiff.model<-final.model
# source('./Win Probability Model.R')
# summary(prob.model)
# WinProb.model<-prob.model
# Load Workbook
wb<-loadWorkbook('./Output/CFB Prediction Tool - Week 1 - 2024 (2024-08-24).xlsx')
### Apply Function and Export Current Workbook ###
## Inputs
model<-PointDiff.model
#WinProb<-WinProb.model
year <-2024
wk<-1
date <- today()
wb<-wb
# Run Function
Gen_Tool_cfb(model, year, wk, date, wb = wb)
source('../../../Football Functions.R')
source('./Point Differential Model.R')
### Model to use ###
summary(final.model)
PointDiff.model<-final.model
# source('./Win Probability Model.R')
# summary(prob.model)
# WinProb.model<-prob.model
# Load Workbook
wb<-loadWorkbook('./Output/CFB Prediction Tool - Week 1 - 2024 (2024-08-24).xlsx')
### Apply Function and Export Current Workbook ###
## Inputs
model<-PointDiff.model
#WinProb<-WinProb.model
year <-2024
wk<-1
date <- today()
wb<-wb
# Run Function
Gen_Tool_cfb(model, year, wk, date, wb = wb)
