print(sort(full.team.dat$Team[which(!full.team.dat$Team %in% team.ids$kp_name)]))
full.team.dat$team_id<-team.ids$team_id[match(full.team.dat$Team, team.ids$kp_name)]
schedule$home_court_adv<-round(full.team.dat$`Home Court Advantage`[match(schedule$home_id, full.team.dat$team_id)], 2)
schedule$date<-as.Date(schedule$date)
schedule<-schedule[sort(1:nrow(schedule), decreasing = T),]
upcoming_schedule<-schedule %>% filter(start_date == Sys.Date() | start_date == Sys.Date()+1) %>%
dplyr::select("id","date", "start_date", "home_location", "away_location", "venue_full_name")%>%
rename(`Game ID` = id, Date = start_date, Home = home_location, Away = away_location, Venue = venue_full_name)
## Export to workbook
# delete a sheet from the workbook
# deleteData(wb, "Upcoming Games",cols = 6, rows = 10000, gridExpand = T)
addWorksheet(wb, "Upcoming Games")
writeData(wb, "Upcoming Games", upcoming_schedule)
writeData(wb, "2024-25 Schedule", schedule)
saveWorkbook(wb, paste0("./2024-25 CBB Master.xlsx"), overwrite = TRUE)
}
source("../../Functions.R")
source("../../Codes.R")
usethis::edit_r_environ()
library(dplyr)
library(hoopR)
## Update College Basketball ELO and Schedule Master ##
preseason_data<-list(read_xlsx("./2024-25 Preseason Projections.xlsx", sheet = 1),
read_xlsx("./2024-25 Preseason Projections.xlsx", sheet = 2))
wb<-loadWorkbook("./2024-25 CBB Master Original.xlsx")
update_cbb_master(preseason_data,wb)
source("../../Functions.R")
source("../../Codes.R")
usethis::edit_r_environ()
library(dplyr)
library(hoopR)
## Update College Basketball ELO and Schedule Master ##
preseason_data<-list(read_xlsx("./2024-25 Preseason Projections.xlsx", sheet = 1),
read_xlsx("./2024-25 Preseason Projections.xlsx", sheet = 2))
wb<-loadWorkbook("./2024-25 CBB Master Original.xlsx")
update_cbb_master(preseason_data,wb)
source("../../Functions.R")
source("../../Codes.R")
usethis::edit_r_environ()
library(dplyr)
library(hoopR)
## Update College Basketball ELO and Schedule Master ##
preseason_data<-list(read_xlsx("./2024-25 Preseason Projections.xlsx", sheet = 1),
read_xlsx("./2024-25 Preseason Projections.xlsx", sheet = 2))
wb<-loadWorkbook("./2024-25 CBB Master Original.xlsx")
update_cbb_master(preseason_data,wb)
source("../../Functions.R")
source("../../Codes.R")
usethis::edit_r_environ()
library(dplyr)
library(hoopR)
## Update College Basketball ELO and Schedule Master ##
preseason_data<-list(read_xlsx("./2024-25 Preseason Projections.xlsx", sheet = 1),
read_xlsx("./2024-25 Preseason Projections.xlsx", sheet = 2))
wb<-loadWorkbook("./2024-25 CBB Master Original.xlsx")
update_cbb_master(preseason_data,wb)
source("../../Functions.R")
source("../../Functions.R")
source("../../Codes.R")
usethis::edit_r_environ()
library(dplyr)
library(hoopR)
## Update College Basketball ELO and Schedule Master ##
preseason_data<-list(read_xlsx("./2024-25 Preseason Projections.xlsx", sheet = 1),
read_xlsx("./2024-25 Preseason Projections.xlsx", sheet = 2))
wb<-loadWorkbook("./2024-25 CBB Master Original.xlsx")
update_cbb_master(preseason_data,wb)
source("../../Functions.R")
source("../../Codes.R")
usethis::edit_r_environ()
library(dplyr)
library(hoopR)
## Update College Basketball ELO and Schedule Master ##
preseason_data<-list(read_xlsx("./2024-25 Preseason Projections.xlsx", sheet = 1),
read_xlsx("./2024-25 Preseason Projections.xlsx", sheet = 2))
wb<-loadWorkbook("./2024-25 CBB Master Original.xlsx")
update_cbb_master(preseason_data,wb)
source("../../Functions.R")
source("../../Codes.R")
usethis::edit_r_environ()
library(dplyr)
library(hoopR)
## Update College Basketball ELO and Schedule Master ##
preseason_data<-list(read_xlsx("./2024-25 Preseason Projections.xlsx", sheet = 1),
read_xlsx("./2024-25 Preseason Projections.xlsx", sheet = 2))
wb<-loadWorkbook("./2024-25 CBB Master Original.xlsx")
update_cbb_master(preseason_data,wb)
source("../../Functions.R")
source("../../Codes.R")
usethis::edit_r_environ()
library(dplyr)
library(hoopR)
## Update College Basketball ELO and Schedule Master ##
preseason_data<-list(read_xlsx("./2024-25 Preseason Projections.xlsx", sheet = 1),
read_xlsx("./2024-25 Preseason Projections.xlsx", sheet = 2))
wb<-loadWorkbook("./2024-25 CBB Master Original.xlsx")
update_cbb_master(preseason_data,wb)
login(user_email = Sys.getenv("KP_USER"), user_pw = Sys.getenv("KP_PW"))
kp.eff.dat<-kp_efficiency(min_year = 2022, max_year = 2025)
# ## BPI
# BPI.list<-list()
# for(i in c(2022:2024)){
# yr<-i
# url <- paste0("https://www.espn.com/mens-college-basketball/bpi/_/season/",yr)
# html_code <- read_html(url) # Read the HTML code of the page
# table_html <- html_code %>% html_nodes("table") # %>% .[[1]] # Use the html_nodes function to extract the table
# # Use the html_table function to convert the table
# BPI.dat.raw <- table_html %>% html_table() # HTML code into a data frame
# head(BPI.dat.raw)
# BPI.dat.raw<-cbind(BPI.dat.raw[[1]], BPI.dat.raw[[2]])
# colnames(BPI.dat.raw)<-BPI.dat.raw[1,]
# BPI.dat.raw<-BPI.dat.raw[-1,]
# BPI.list[[i-2020]]<-BPI.dat.raw
# names(BPI.list)[[i-2020]]<-i
# }
## Bart Torvik
BT.raw.dat<-preseason_data[[1]]
miya_raw.dat<-preseason_data[[2]]
## Ensure team names are consistent
sort(BT.raw.dat$Team[which(!BT.raw.dat$Team %in% kp.eff.dat$team)])
sort(kp.eff.dat$team[which(!kp.eff.dat$team %in% BT.raw.dat$Team)])
sort(unique(kp.eff.dat$team))
kp.eff.dat$team<-case_when(kp.eff.dat$team == "Cal St. Northridge"~"CSUN",
kp.eff.dat$team == "IUPUI"~"IU Indy",
kp.eff.dat$team == "UMKC" ~ "Kansas City",
kp.eff.dat$team == "McNeese St." ~ "McNeese",
kp.eff.dat$team == "Nicholls St." ~ "Nicholls",
kp.eff.dat$team == "SIU Edwardsville" ~ "SIUE",
kp.eff.dat$team == "Southeast Missouri St." ~ "Southeast Missouri",
kp.eff.dat$team == "St. Francis PA" ~ "Saint Francis",
T ~ kp.eff.dat$team)
sort(BT.raw.dat$Team[which(!BT.raw.dat$Team %in% kp.eff.dat$team)])
sort(BT.raw.dat$Team[which(!kp.eff.dat$team %in% BT.raw.dat$Team)])
BT.raw.dat$Team<-case_when(BT.raw.dat$Team == "IUPUI" ~ "IU Indy",
BT.raw.dat$Team == "Nicholls St." ~ "Nicholls",
BT.raw.dat$Team == "McNeese St." ~ "McNeese",
BT.raw.dat$Team == "UMKC" ~ "Kansas City",
BT.raw.dat$Team == "Cal St. Northridge" ~ "CSUN",
BT.raw.dat$Team == "Southeast Missouri St." ~ "Southeast Missouri",
BT.raw.dat$Team == "SIU Edwardsville" ~ "SIUE",
T ~ BT.raw.dat$Team)
sort(BT.raw.dat$Team[which(!BT.raw.dat$Team %in% kp.eff.dat$team)])
sort(kp.eff.dat$team[which(!kp.eff.dat$team %in% BT.raw.dat$Team)])
sort(BT.raw.dat$Team[which(!kp.eff.dat$team %in% BT.raw.dat$Team)])
kp.eff.dat$team
BT.raw.dat$Team
View(BT.raw.dat)
View(kp.eff.dat)
sort(BT.raw.dat$Team[which(!kp.eff.dat$team %in% BT.raw.dat$Team)])
which(BT.raw.dat$Team = "Loyola Chicago")
which(BT.raw.dat$Team == "Loyola Chicago")
which(kp.eff.dat$Team == "Loyola Chicago")
which(kp.eff.dat$team == "Loyola Chicago")
BT.raw.dat$Team[which(!kp.eff.dat$team %in% BT.raw.dat$Team)]
kp.eff.dat$team[which(!kp.eff.dat$team %in% BT.raw.dat$Team)]
length(sort(BT.raw.dat$Team[which(!kp.eff.dat$team %in% BT.raw.dat$Team)]))
sort(BT.raw.dat$Team[which(!kp.eff.dat$team %in% BT.raw.dat$Team)])
kp.eff.dat$team<-case_when(kp.eff.dat$team == "Cal St. Northridge"~"CSUN",
kp.eff.dat$team == "IUPUI"~"IU Indy",
kp.eff.dat$team == "UMKC" ~ "Kansas City",
kp.eff.dat$team == "McNeese St." ~ "McNeese",
kp.eff.dat$team == "Nicholls St." ~ "Nicholls",
kp.eff.dat$team == "SIU Edwardsville" ~ "SIUE",
kp.eff.dat$team == "Southeast Missouri St." ~ "Southeast Missouri",
kp.eff.dat$team == "St. Francis PA" ~ "Saint Francis",
kp.eff.dat$team == "Loyola Chicago" ~ "Loyola Chicago",
T ~ kp.eff.dat$team)
sort(BT.raw.dat$Team[which(!BT.raw.dat$Team %in% kp.eff.dat$team)])
sort(BT.raw.dat$Team[which(!kp.eff.dat$team %in% BT.raw.dat$Team)])
BT.raw.dat$Team<-case_when(BT.raw.dat$Team == "IUPUI" ~ "IU Indy",
BT.raw.dat$Team == "Nicholls St." ~ "Nicholls",
BT.raw.dat$Team == "McNeese St." ~ "McNeese",
BT.raw.dat$Team == "UMKC" ~ "Kansas City",
BT.raw.dat$Team == "Cal St. Northridge" ~ "CSUN",
BT.raw.dat$Team == "Southeast Missouri St." ~ "Southeast Missouri",
BT.raw.dat$Team == "SIU Edwardsville" ~ "SIUE",
BT.raw.dat$Team == "Loyola Chicago" ~ "Loyola Chicago",
T ~ BT.raw.dat$Team)
sort(BT.raw.dat$Team[which(!BT.raw.dat$Team %in% kp.eff.dat$team)])
sort(kp.eff.dat$team[which(!kp.eff.dat$team %in% BT.raw.dat$Team)])
sort(BT.raw.dat$Team[which(!kp.eff.dat$team %in% BT.raw.dat$Team)])
kp.eff.dat$team == "Loyola Chicago"
BT.raw.dat$Team == "Loyola Chicago"
# Evan Miya Names
sort(miya_raw.dat$Team[which(!miya_raw.dat$Team %in% kp.eff.dat$team)])
# Replace State with St.
miya_raw.dat$Team<-gsub("State", "St.", miya_raw.dat$Team)
sort(miya_raw.dat$Team[which(!miya_raw.dat$Team %in% kp.eff.dat$team)])
sort(unique(kp.eff.dat$team))
miya_raw.dat$Team<-case_when(miya_raw.dat$Team == "Saint Francis (PA)" ~ "Saint Francis",
miya_raw.dat$Team == "Arkansas-Little Rock" ~ "Little Rock",
miya_raw.dat$Team == "Arkansas-Pine Bluff" ~ "Arkansas Pine Bluff",
miya_raw.dat$Team == "Bethune-Cookman" ~ "Bethune Cookman",
miya_raw.dat$Team == "California Baptist" ~ "Cal Baptist",
miya_raw.dat$Team == "College of Charleston" ~ "Charleston",
miya_raw.dat$Team == "Detroit" ~ "Detroit Mercy",
miya_raw.dat$Team == "Florida International" ~ "FIU",
miya_raw.dat$Team == "Fort Wayne" ~ "Purdue Fort Wayne",
miya_raw.dat$Team == "Gardner-Webb" ~ "Gardner Webb",
miya_raw.dat$Team == "Grambling" ~ "Grambling St.",
miya_raw.dat$Team == "Illinois-Chicago" ~ "Illinois Chicago",
miya_raw.dat$Team == "Long Island" ~ "LIU",
miya_raw.dat$Team == "Louisiana-Lafayette" ~ "Louisiana",
miya_raw.dat$Team == "Louisiana-Monroe" ~ "Louisiana Monroe",
miya_raw.dat$Team == "Loyola Maryland" ~ "Loyola MD",
miya_raw.dat$Team == "Maryland-Eastern Shore" ~ "Maryland Eastern Shore",
miya_raw.dat$Team == "Miami (Fla.)" ~ "Miami FL",
miya_raw.dat$Team == "Miami (Ohio)" ~ "Miami OH",
miya_raw.dat$Team == "Missouri-Kansas City" ~ "Kansas City",
miya_raw.dat$Team == "NC St." ~ "N.C. State",
miya_raw.dat$Team == "Ole Miss" ~ "Mississippi",
miya_raw.dat$Team == "Saint John's" ~ "St. John's",
miya_raw.dat$Team == "McNeese St." ~ "McNeese",
miya_raw.dat$Team == "Nicholls St." ~ "Nicholls",
miya_raw.dat$Team == "SIU Edwardsville" ~ "SIUE",
miya_raw.dat$Team == "Southeast Missouri St." ~ "Southeast Missouri",
miya_raw.dat$Team == "Prairie View" ~ "Prairie View A&M",
miya_raw.dat$Team == "Saint Bonaventure" ~ "St. Bonaventure",
miya_raw.dat$Team == "Saint Francis PA" ~ "Saint Francis",
miya_raw.dat$Team == "Omaha" ~ "Nebraska Omaha",
miya_raw.dat$Team == "Saint Thomas (Minn.)" ~ "St. Thomas",
miya_raw.dat$Team == "South Carolina Upstate" ~ "USC Upstate",
miya_raw.dat$Team == "Southern Mississippi" ~ "Southern Miss",
miya_raw.dat$Team == "Tennessee-Martin" ~ "Tennessee Martin",
miya_raw.dat$Team == "Texas-Rio Grande Valley" ~ "UT Rio Grande Valley",
miya_raw.dat$Team == "Texas A&M-Commerce" ~ "Texas A&M Commerce",
miya_raw.dat$Team == "Texas A&M-Corpus Christi" ~ "Texas A&M Corpus Chris",
miya_raw.dat$Team == "Cal St. Northridge" ~ "CSUN",
T ~ miya_raw.dat$Team)
sort(miya_raw.dat$Team[which(!miya_raw.dat$Team %in% kp.eff.dat$team)])
sort(miya_raw.dat$Team[which(!miya_raw.dat$Team %in% BT.raw.dat$Team)])
sort(BT.raw.dat$Team[which(!BT.raw.dat$Team %in% kp.eff.dat$team)])
if(length(sort(miya_raw.dat$Team[which(!miya_raw.dat$Team %in% kp.eff.dat$team)])) > 0 |
length(sort(miya_raw.dat$Team[which(!miya_raw.dat$Team %in% BT.raw.dat$Team)])) > 0 |
unique(sort(BT.raw.dat$Team[which(!BT.raw.dat$Team %in% kp.eff.dat$team)])) != "Team"){
print(paste0("---- ERROR MISMATCH NAMES IN MIYA AND TORVIK/KENPOM! ---- "))
}
## Join Evan Miya, Bart Torvik and KenPom Data
full.dat<-full_join(kp.eff.dat%>%filter(year==2025), BT.raw.dat, by = c("team" = "Team"))%>%
left_join(., miya_raw.dat, by = c("team" = "Team"))%>%
dplyr::select("team", "conf", "adj_t", "adj_o", "adj_d", "AdjOE", "AdjDE", "Barthag","O-Rate", "D-Rate","Relative Rating")%>%
rename("Team" = team,
"Conference"=conf,
"KenPom Adj T" = adj_t,
"KenPom Adj O" = adj_o,
"KenPom Adj D" = adj_d,
"Torvik AdjOE" = AdjOE,
"Torvik AdjDE" = AdjDE,
"Torvik Barthag" = Barthag,
"EvanMiya O-Rate" = `O-Rate`,
"EvanMiya D-Rate" = `D-Rate`,
"EvanMiya Relative Rating" = `Relative Rating`)%>%
filter(Team!="Team")
full.dat<-full_join(full.dat, kp.eff.dat%>%filter(year == 2024)%>% dplyr::select("team", "adj_o", "adj_d"), by = c("Team" = "team"))%>%
rename("KenPom Adj O 2024" = adj_o,
"KenPom Adj D 2024" = adj_d)%>%
mutate("KenPom AdjEM 2024" = `KenPom Adj O 2024` - `KenPom Adj D 2024`)%>%
dplyr::select(-c("KenPom Adj O 2024", "KenPom Adj D 2024"))
full.dat$`Torvik AdjOE`<-as.numeric(full.dat$`Torvik AdjOE`)
full.dat$`Torvik AdjDE`<-as.numeric(full.dat$`Torvik AdjDE`)
full.dat$`Torvik Barthag`<-as.numeric(full.dat$`Torvik Barthag`)
# Calculate Adjusted Efficiency
full.dat$`KenPom AdjEM`<-full.dat$`KenPom Adj O` - full.dat$`KenPom Adj D`
full.dat$`Torvik AdjEM`<-full.dat$`Torvik AdjOE` - full.dat$`Torvik AdjDE`
## Calculate KenPom YoY Regreesion
kp.eff.dat$AdjEM<-kp.eff.dat$adj_o - kp.eff.dat$adj_d
kp.eff.dat[order(kp.eff.dat$AdjEM, decreasing = T),c("team", "year", "AdjEM")]
View(kp.eff.dat)
kp.2022.dat<-kp.eff.dat%>%
filter(year == 2022)%>%
dplyr::select("team", "AdjEM")%>%
rename("2022 AdjEM" = AdjEM)
kp.2023.dat<-kp.eff.dat%>%
filter(year == 2023)%>%
dplyr::select("team", "AdjEM")%>%
rename("2023 AdjEM" = AdjEM)
kp.2024.dat<-kp.eff.dat%>%
filter(year == 2024)%>%
dplyr::select("team", "AdjEM")%>%
rename("2024 AdjEM" = AdjEM)
kp.yoy.dat<-left_join(kp.2022.dat, kp.2023.dat, by = "team")%>%
left_join(., kp.2024.dat, by = "team")%>%
mutate("2022-2023 Change" = `2023 AdjEM` - `2022 AdjEM`,
"2023-2024 Change" = `2024 AdjEM` - `2023 AdjEM`,
"2022 Average" = mean(`2022 AdjEM`, na.rm=T),
"2023 Average" = mean(`2023 AdjEM`, na.rm=T),
"2024 Average" = mean(`2024 AdjEM`, na.rm=T))
r<-mean(c(cor(kp.yoy.dat$`2022 AdjEM`, kp.yoy.dat$`2023 AdjEM`, use = "complete.obs"),
cor(kp.yoy.dat$`2023 AdjEM`, kp.yoy.dat$`2024 AdjEM`, use = "complete.obs")))
p.rm<-100*(1-r)
## Add KenPom Regression to the mean to full data
full.dat$`KenPom AdjEM 2024`<-case_when(is.na(full.dat$`KenPom AdjEM 2024`) ~ full.dat$`KenPom AdjEM`,
T ~ full.dat$`KenPom AdjEM 2024`)
full.dat$`KenPom AdjEM Regressed`<-full.dat$`KenPom AdjEM 2024`*r
## Calculate Bart Torvik Efficiency Metric
full.dat$`Torvik AdjEM`<-full.dat$`Torvik AdjOE` - full.dat$`Torvik AdjDE`
## Filter to get just necessary data
full.dat<-full.dat%>%
dplyr::select("Team", "Conference", "KenPom AdjEM", "KenPom AdjEM Regressed", "Torvik AdjEM", "EvanMiya Relative Rating")%>%
filter(!is.na(`KenPom AdjEM`))
# Ensure Normality
apply(full.dat[,-c(1:2)], 2, function(x) hist(x))
# Scale numeric values to z-score
full.dat$`KenPom AdjEM Regressed`<-case_when(is.na(full.dat$`KenPom AdjEM Regressed`) ~ full.dat$`KenPom AdjEM`,
T ~ full.dat$`KenPom AdjEM`)
full.dat$`KenPom AdjEM`<-calculate_z_score(full.dat$`KenPom AdjEM`)
full.dat$`KenPom AdjEM Regressed`<-calculate_z_score(full.dat$`KenPom AdjEM Regressed`)
full.dat$`Torvik AdjEM`<-calculate_z_score(full.dat$`Torvik AdjEM`)
full.dat$`EvanMiya Relative Rating`<-calculate_z_score(full.dat$`EvanMiya Relative Rating`)
# Average Four ratings together to get aggregate
full.dat$`Aggregate Rating`<-rowMeans(full.dat[,-c(1:2)], na.rm = T)
# Scale to an ELO range
mean(full.dat$`Aggregate Rating`)
# Scale to a specific mean and standard deviation
sd<-sd(kp.eff.dat$adj_o - kp.eff.dat$adj_d)
u<-mean(kp.eff.dat$adj_o - kp.eff.dat$adj_d)
sd/max(kp.eff.dat$adj_o - kp.eff.dat$adj_d)
sd/min(kp.eff.dat$adj_o - kp.eff.dat$adj_d)
sd/(max(kp.eff.dat$adj_o - kp.eff.dat$adj_d) - min(kp.eff.dat$adj_o - kp.eff.dat$adj_d))
full.dat$`Pre Season ELO`<-((full.dat$`Aggregate Rating`*(1505*.115))+1505)
sd<-sd(full.dat$`Pre Season ELO`)
u<-mean(full.dat$`Pre Season ELO`)
sd/u
sd/max(full.dat$`Pre Season ELO`)
sd/min(full.dat$`Pre Season ELO`)
max(full.dat$`Pre Season ELO`)/u
min(full.dat$`Pre Season ELO`)/u
(max(full.dat$`Pre Season ELO`) - min(full.dat$`Pre Season ELO`))/u
sd/(max(full.dat$`Pre Season ELO`) - min(full.dat$`Pre Season ELO`))
max(full.dat$`Pre Season ELO`)/(max(full.dat$`Pre Season ELO`) - min(full.dat$`Pre Season ELO`))
min(full.dat$`Pre Season ELO`)/(max(full.dat$`Pre Season ELO`) - min(full.dat$`Pre Season ELO`))
## Read in schedule for 2024
schedule<-hoopR::load_mbb_schedule()
names(schedule)
schedule<-schedule%>% dplyr::select("id","date","season","season_type","start_date","home_id", "away_id",
"venue_id", "home_location", "away_location", "venue_full_name",
"neutral_site", "conference_competition", "home_score", "away_score") %>%
mutate("point_diff" = home_score - away_score,
"result" = ifelse(point_diff>0, home_location, ifelse(point_diff<0, away_location, "")))
schedule
## Team ID's
team.ids<-schedule %>% dplyr::select("home_id", "home_location")%>%
distinct() %>%
rename("team_id" = home_id) %>%
arrange(home_location)%>%
rename("team" = home_location)
full.team.dat<-kp_hca()%>% dplyr::select(team, hca)%>%rename("Team" = team, "Home Court Advantage" = hca)%>%
full_join(., full.dat, by = "Team")
View(full.team.dat)
full.team.dat$`Home Court Advantage`<-ifelse(is.na(full.team.dat$`Home Court Advantage`), mean(full.team.dat$`Home Court Advantage`, na.rm=T), full.team.dat$`Home Court Advantage`)
sort(team.ids$team[which(!team.ids$team %in% full.team.dat$Team)])
team.ids$kp_name<-team.ids$team
team.ids$kp_name<-gsub("State", "St.", team.ids$kp_name)
team.ids$kp_name<-gsub("-", " ", team.ids$kp_name)
team.ids$kp_name<-trimws(gsub("University", "", team.ids$kp_name))
team.ids$kp_name<-trimws(team.ids$kp_name)
sort(team.ids$kp_name[which(!team.ids$kp_name %in% full.team.dat$Team)])
team.ids$kp_name<-case_when(
team.ids$kp_name == "App St." ~ "Appalachian St.",
team.ids$kp_name == "Boston" ~ "Boston University",
team.ids$kp_name == "Cal St. Northridge" ~ "CSUN",
team.ids$kp_name == "California Baptist" ~ "Cal Baptist",
team.ids$kp_name == "Florida International" ~ "FIU",
team.ids$kp_name == "Grambling" ~ "Grambling St.",
team.ids$kp_name == "Hawai'i" ~ "Hawaii",
team.ids$kp_name == "IU Indianapolis" ~ "IU Indy",
team.ids$kp_name == "Long Island" ~ "LIU",
team.ids$kp_name == "Loyola Maryland" ~ "Loyola MD",
team.ids$kp_name == "Miami" ~ "Miami FL",
team.ids$kp_name == "Miami (OH)" ~ "Miami OH",
team.ids$kp_name == "NC St." ~ "N.C. State",
team.ids$kp_name == "Ole Miss" ~ "Mississippi",
team.ids$kp_name == "Omaha" ~ "Nebraska Omaha",
team.ids$kp_name == "Pennsylvania" ~ "Penn",
team.ids$kp_name == "Sam Houston" ~ "Sam Houston St.",
team.ids$kp_name == "Seattle U" ~ "Seattle",
team.ids$kp_name == "San José St." ~ "San Jose St.",
team.ids$kp_name == "SE Louisiana" ~ "Southeastern Louisiana",
team.ids$kp_name == "SIU Edwardsville" ~ "SIUE",
team.ids$kp_name == "St. Francis (PA)" ~ "Saint Francis",
team.ids$kp_name == "South Carolina Upstate" ~ "USC Upstate",
team.ids$kp_name == "Southeast Missouri St." ~ "Southeast Missouri",
#team.ids$kp_name == "Southeast Louisiana" ~ "Southeastern Louisiana",
team.ids$kp_name == "UAlbany" ~ "Albany",
team.ids$kp_name == "UConn" ~ "Connecticut",
team.ids$kp_name == "St. Thomas Minnesota" ~ "St. Thomas",
#team.ids$kp_name == "St. Thomas (MN)" ~ "St. Thomas",
team.ids$kp_name == "Texas A&M Corpus Christi" ~ "Texas A&M Corpus Chris",
team.ids$kp_name == "UIC" ~ "Illinois Chicago",
team.ids$kp_name == "UL Monroe" ~ "Louisiana Monroe",
team.ids$kp_name == "UT Martin" ~ "Tennessee Martin",
T ~ team.ids$kp_name)
# Confirm Naming
print(paste0("Away Teams Missing From Data:"), quote = F)
print(sort(team.ids$kp_name[which(!team.ids$kp_name %in% full.team.dat$Team)]))
print(paste0("Home Teams Missing From Data:"), quote = F)
print(sort(full.team.dat$Team[which(!full.team.dat$Team %in% team.ids$kp_name)]))
full.team.dat$team_id<-team.ids$team_id[match(full.team.dat$Team, team.ids$kp_name)]
schedule$home_court_adv<-round(full.team.dat$`Home Court Advantage`[match(schedule$home_id, full.team.dat$team_id)], 2)
schedule$date<-as.Date(schedule$date)
schedule<-schedule[sort(1:nrow(schedule), decreasing = T),]
upcoming_schedule<-data.frame(schedule %>% filter(start_date == Sys.Date()+1 | start_date == Sys.Date()+2) %>%
mutate(start_date = start_date-1) %>%
dplyr::select("id"))
upcoming_schedule<-data.frame(schedule %>% filter(start_date == Sys.Date()+1 | start_date == Sys.Date()+2) %>%
#mutate(start_date = start_date-1) %>%
dplyr::select("id"))
names(upcoming_schedule)<-c("Game ID")
upcoming_schedule
names(upcoming_schedule)<-c("Game ID")
upcoming_schedule
## Read in schedule for 2024
schedule<-hoopR::load_mbb_schedule()
names(schedule)
schedule<-schedule%>% dplyr::select("id","date","season","season_type","start_date","home_id", "away_id",
"venue_id", "home_location", "away_location", "venue_full_name",
"neutral_site", "conference_competition", "home_score", "away_score") %>%
mutate("point_diff" = home_score - away_score,
"result" = ifelse(point_diff>0, home_location, ifelse(point_diff<0, away_location, "")))
schedule
## Team ID's
team.ids<-schedule %>% dplyr::select("home_id", "home_location")%>%
distinct() %>%
rename("team_id" = home_id) %>%
arrange(home_location)%>%
rename("team" = home_location)
team.ids
#
# # Confirm Naming
# print(paste0("Away Teams Missing From Data:"), quote = F)
# print(sort(team.ids$kp_name[which(!team.ids$kp_name %in% full.team.dat$Team)]))
# print(paste0("Home Teams Missing From Data:"), quote = F)
# print(sort(full.team.dat$Team[which(!full.team.dat$Team %in% team.ids$kp_name)]))
#
# full.team.dat$team_id<-team.ids$team_id[match(full.team.dat$Team, team.ids$kp_name)]
# schedule$home_court_adv<-round(full.team.dat$`Home Court Advantage`[match(schedule$home_id, full.team.dat$team_id)], 2)
#
schedule$date<-as.Date(schedule$date)
schedule<-schedule[sort(1:nrow(schedule), decreasing = T),]
upcoming_schedule<-data.frame(schedule %>% filter(start_date == Sys.Date()+1 | start_date == Sys.Date()+2) %>%
#mutate(start_date = start_date-1) %>%
dplyr::select("id"))
names(upcoming_schedule)<-c("Game ID")
upcoming_schedule
schedule
source("../../Functions.R")
source("../../Codes.R")
usethis::edit_r_environ()
library(dplyr)
library(hoopR)
## Update College Basketball ELO and Schedule Master ##
preseason_data<-list(read_xlsx("./2024-25 Preseason Projections.xlsx", sheet = 1),
read_xlsx("./2024-25 Preseason Projections.xlsx", sheet = 2))
wb<-loadWorkbook("./2024-25 CBB Master Original.xlsx")
update_cbb_master(preseason_data,wb)
?deleteData
source("../../Functions.R")
source("../../Codes.R")
usethis::edit_r_environ()
library(dplyr)
library(hoopR)
## Update College Basketball ELO and Schedule Master ##
wb<-loadWorkbook("./2024-25 CBB Master Original.xlsx")
update_cbb_master(preseason_data,wb)
source("../../Functions.R")
source("../../Codes.R")
usethis::edit_r_environ()
library(dplyr)
library(hoopR)
## Update College Basketball ELO and Schedule Master ##
wb<-loadWorkbook("./2024-25 CBB Master Original.xlsx")
update_cbb_master(preseason_data,wb)
source("../../Functions.R")
source("../../Codes.R")
usethis::edit_r_environ()
library(dplyr)
library(hoopR)
## Update College Basketball ELO and Schedule Master ##
wb<-loadWorkbook("./2024-25 CBB Master Original.xlsx")
update_cbb_master(preseason_data,wb)
source("../../Functions.R")
source("../../Codes.R")
usethis::edit_r_environ()
library(dplyr)
library(hoopR)
## Update College Basketball ELO and Schedule Master ##
wb<-loadWorkbook("./2024-25 CBB Master.xlsx")
update_cbb_master(preseason_data,wb)
source("../../Functions.R")
source("../../Codes.R")
usethis::edit_r_environ()
library(dplyr)
library(hoopR)
## Update College Basketball ELO and Schedule Master ##
wb<-loadWorkbook("./2024-25 CBB Master.xlsx")
update_cbb_master(preseason_data,wb)
source("../../Functions.R")
source("../../Codes.R")
usethis::edit_r_environ()
library(dplyr)
library(hoopR)
## Update College Basketball ELO and Schedule Master ##
wb<-loadWorkbook("./2024-25 CBB Master.xlsx")
update_cbb_master(preseason_data,wb)
source("../../Functions.R")
source("../../Codes.R")
usethis::edit_r_environ()
library(dplyr)
library(hoopR)
## Update College Basketball ELO and Schedule Master ##
wb<-loadWorkbook("./2024-25 CBB Master.xlsx")
update_cbb_master(preseason_data,wb)
